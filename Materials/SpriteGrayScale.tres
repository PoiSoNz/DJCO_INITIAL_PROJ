[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://Assets/Sprites/Hud/croissant.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
output_port_for_preview = 1
source = 2
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=10]
constant = Color( 0.490234, 0.490234, 0.490234, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=3]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=8]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:12
	vec3 n_out12p0;
	n_out12p0 = vec3(UV,0.0);

// Texture:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 _tex_read = texture( TEXTURE , n_out12p0.xy );
		n_out13p0 = _tex_read.rgb;
		n_out13p1 = _tex_read.a;
	}

// VectorDecompose:7
	float n_out7p0;
	float n_out7p1;
	float n_out7p2;
	n_out7p0 = n_out13p0.x;
	n_out7p1 = n_out13p0.y;
	n_out7p2 = n_out13p0.z;

// ScalarOp:4
	float n_out4p0;
	n_out4p0 = n_out7p0 + n_out7p1;

// ScalarOp:8
	float n_out8p0;
	n_out8p0 = n_out4p0 + n_out7p2;

// ScalarOp:6
	float n_in6p1 = 3.00000;
	float n_out6p0;
	n_out6p0 = n_out8p0 / n_in6p1;

// VectorCompose:9
	vec3 n_out9p0;
	n_out9p0 = vec3( n_out6p0 , n_out6p0 , n_out6p0 );

// Color:15
	vec3 n_out15p0;
	float n_out15p1;
	n_out15p0 = vec3(0.490234,0.490234,0.490234);
	n_out15p1 = 1.000000;

// ColorOp:14
	vec3 n_out14p0;
	n_out14p0=min(n_out9p0,n_out15p0);

// Output:0
	COLOR.rgb = n_out14p0;
	COLOR.a = n_out13p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 181, -324 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1280, 260 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 460, -320 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 820, -260 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 160, -220 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 640, -180 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 1100, -180 )
nodes/fragment/12/node = SubResource( 1 )
nodes/fragment/12/position = Vector2( 0, 120 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 200, 0 )
nodes/fragment/14/node = SubResource( 9 )
nodes/fragment/14/position = Vector2( 1200, 100 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( 872, 131.5 )
nodes/fragment/connections = PoolIntArray( 8, 0, 6, 0, 6, 0, 9, 0, 6, 0, 9, 1, 6, 0, 9, 2, 4, 0, 8, 0, 7, 0, 4, 0, 7, 1, 4, 1, 7, 2, 8, 1, 12, 0, 13, 0, 13, 0, 7, 0, 13, 1, 0, 1, 9, 0, 14, 0, 15, 0, 14, 1, 14, 0, 0, 0 )

[resource]
shader = SubResource( 8 )

